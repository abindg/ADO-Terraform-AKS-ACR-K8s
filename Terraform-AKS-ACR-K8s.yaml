trigger:
  branches:
    include:
    - main
  paths:
    exclude:
      - kube-manifests
      - Docker
variables:
- name: DEV_ENVIRONMENT
  value: Infrastructure
parameters:
- name: import
  default: false
  values:
  - true
  - false
- name: destroy
  default: false
  values:
  - true
  - false
stages:
- stage: ValidateStage
  displayName: Validate Stage
  jobs:
  - job: Validatejob
    continueOnError: false
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: PublishPipelineArtifact@1
      displayName: PublishArtefacts
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)'
        artifact: 'terraform-artefacts'
        publishLocation: 'pipeline'
    - task: KubectlInstaller@0
      inputs:
        kubectlVersion: 'latest'
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: 'latest'
    - task: TerraformCLI@0
      displayName: Terraform first Init
      inputs:
        command: 'init'
        backendType: 'azurerm'
        backendServiceArm: 'demoabin-svc'
        backendAzureRmResourceGroupName: 'abin-tfstg-rg'
        backendAzureRmStorageAccountName: 'abintfstateact'
        backendAzureRmContainerName: 'tfstatefiles'
        backendAzureRmKey: 'aksabin-tfstate'
        allowTelemetryCollection: false
    - task: TerraformCLI@0
      displayName: Terraform Validate
      inputs:
        command: 'validate'
        allowTelemetryCollection: false
- stage: DeployInfra
  displayName: Deploy Infrastructure
  jobs:
  - deployment: DeployInfra
    displayName: Deploy Infrastructure
    pool:
      vmImage: ubuntu-latest
    environment:
      name: $(DEV_ENVIRONMENT)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadSecureFile@1
            displayName: Download Ssh files
            name: sshkey
            inputs:
              secureFile: 'akssshkey.pub'
          - task: TerraformCLI@0
            displayName: Terraform Init 2
            inputs:
              command: 'init'
              workingDirectory: '$(Pipeline.Workspace)/terraform-artefacts'
              backendType: 'azurerm'
              backendServiceArm: 'demoabin-svc'
              ensureBackend: true
              backendAzureRmResourceGroupName: 'abin-tfstg-rg'
              backendAzureRmResourceGroupLocation: 'Central US'
              backendAzureRmStorageAccountName: 'abintfstateact'
              backendAzureRmContainerName: 'tfstatefiles'
              backendAzureRmKey: '$(DEV_ENVIRONMENT)-demoabin-tfstate'
              allowTelemetryCollection: false
          - task: TerraformCLI@0
            displayName: Terraform Import
            condition: ${{ parameters.import }}
            inputs:
              command: 'import'
              workingDirectory: '$(Pipeline.Workspace)/terraform-artefacts'
              environmentServiceName: 'demoabin-svc'
              commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath)'
              allowTelemetryCollection: true
              resourceAddress: 'azuredevops_serviceendpoint_github.serviceendpoint_github'
              resourceId: 'ADO-Terraform-AKS-ACR-K8s/a637ce26-9029-4110-ba21-6c0c7579a2e9'
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: 'sed -i ''s;#;;g'' $(Pipeline.Workspace)/terraform-artefacts/kubernetes.tf'
          - task: TerraformCLI@0
            displayName: Terraform Plan
            inputs:
              command: 'plan'
              workingDirectory: '$(Pipeline.Workspace)/terraform-artefacts'
              environmentServiceName: 'demoabin-svc'
              commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath)'
              allowTelemetryCollection: false
          - task: TerraformCLI@0
            displayName: Terraform dev Apply
            inputs:
              command: 'apply'
              workingDirectory: '$(Pipeline.Workspace)/terraform-artefacts'
              environmentServiceName: 'demoabin-svc'
              commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -auto-approve'
              allowTelemetryCollection: true
          - task: Bash@3
            displayName: Remove Githubendpoint from state
            condition: and(succeededOrFailed(), eq('${{ parameters.destroy }}', 'true'))
            inputs:
              targetType: 'inline'
              script: 'terraform state rm azuredevops_serviceendpoint_github.serviceendpoint_github'
              workingDirectory: '$(Pipeline.Workspace)/terraform-artefacts'
          - task: TerraformCLI@0
            displayName: Terraform destroy
            condition: and(succeededOrFailed(), eq('${{ parameters.destroy }}', 'true'))
            inputs:
              command: 'destroy'
              workingDirectory: '$(Pipeline.Workspace)/terraform-artefacts'
              environmentServiceName: 'demoabin-svc'
              commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -auto-approve'
              allowTelemetryCollection: true
